-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.industry
(
    industry_id bigserial NOT NULL,
    industry_name character varying(144) NOT NULL,
    PRIMARY KEY (industry_id)
);

CREATE TABLE IF NOT EXISTS public.sub_industry
(
    sub_industry_id bigserial NOT NULL,
    sub_industry_name character varying(144) NOT NULL,
    industry_id bigint NOT NULL,
    PRIMARY KEY (sub_industry_id)
);

CREATE TABLE IF NOT EXISTS public.product_segment
(
    product_segment_id bigserial NOT NULL,
    product_segment_name character varying(144)[] NOT NULL,
    PRIMARY KEY (product_segment_id)
);

CREATE TABLE IF NOT EXISTS public.product_subsegment
(
    product_subsegment_id bigserial NOT NULL,
    product_subsegment_name character varying(144)[] NOT NULL,
    product_segment_id bigint NOT NULL,
    PRIMARY KEY (product_subsegment_id)
);

CREATE TABLE IF NOT EXISTS public.brand
(
    brand_id bigserial NOT NULL,
    brand_name character varying(144) NOT NULL,
    brand_logo bytea,
    PRIMARY KEY (brand_id)
);

CREATE TABLE IF NOT EXISTS public.country
(
    country_code character(3) NOT NULL,
    country_name character(99) NOT NULL,
    PRIMARY KEY (country_code)
);

CREATE TABLE IF NOT EXISTS public.city
(
    city_id bigserial NOT NULL,
    city_name character varying(144) NOT NULL,
    country_code character(3) NOT NULL,
    PRIMARY KEY (city_id)
);

CREATE TABLE IF NOT EXISTS public.province
(
    province_id bigserial NOT NULL,
    province_name character varying(144) NOT NULL,
    PRIMARY KEY (province_id)
);

CREATE TABLE IF NOT EXISTS public.billing_address
(
    billing_address_id bigserial NOT NULL,
    address_1 text NOT NULL,
    address_2 text NOT NULL,
    province_id bigint NOT NULL,
    city_id bigint NOT NULL,
    country_code character varying(3) NOT NULL,
    postal_code character varying(21) NOT NULL,
    PRIMARY KEY (billing_address_id)
);

CREATE TABLE IF NOT EXISTS public.opening_hours
(
    opening_hours_id bigserial NOT NULL,
    day character varying(11)[] NOT NULL,
    open time without time zone NOT NULL,
    close time without time zone NOT NULL,
    PRIMARY KEY (opening_hours_id)
);

CREATE TABLE IF NOT EXISTS public.holiday_name
(
    holiday_name_id bigserial NOT NULL,
    name character varying(99)[] NOT NULL,
    holiday_type_id bigint,
    PRIMARY KEY (holiday_name_id)
);

CREATE TABLE IF NOT EXISTS public.holiday_date
(
    holiday_date_id bigserial NOT NULL,
    holiday_name_id bigint NOT NULL,
    holiday_start_date date NOT NULL,
    holiday_end_date date NOT NULL,
    PRIMARY KEY (holiday_date_id)
);

CREATE TABLE IF NOT EXISTS public.holiday_type
(
    holiday_type_id bigserial NOT NULL,
    holiday_type_name character varying(99)[] NOT NULL,
    PRIMARY KEY (holiday_type_id)
);

CREATE TABLE IF NOT EXISTS public.holiday_schedule_list
(
    holiday_schedule_list_id bigserial NOT NULL,
    holiday_name_id bigint NOT NULL,
    holiday_date_id bigint NOT NULL,
    holiday_type_id bigint NOT NULL,
    overrides_opening_hours boolean NOT NULL,
    PRIMARY KEY (holiday_schedule_list_id)
);

CREATE TABLE IF NOT EXISTS public.company
(
    company_id bigserial NOT NULL,
    company_name text NOT NULL,
    website_url text NOT NULL,
    sub_industry_id bigint NOT NULL,
    product_segment_id bigint NOT NULL,
    brand_id bigint NOT NULL,
    primary_billing_address_id bigint NOT NULL,
    primary_shipping_address_id bigint NOT NULL,
    currency character varying(19) NOT NULL,
    is_active boolean NOT NULL,
    PRIMARY KEY (company_id)
);

CREATE TABLE IF NOT EXISTS public.subscription
(
    subscription_id text NOT NULL,
    customer text,
    current_period_start timestamp without time zone,
    current_period_end timestamp without time zone,
    status text,
    plan_id text,
    trial_period_start_date date,
    trial_period_end_date date,
    subscribe_after_trial boolean,
    offer_id bigint,
    offer_start_date date,
    offer_end_date date,
    valid_to date,
    amount money,
    collection_method text,
    currency text,
    cancel_at timestamp without time zone,
    cancel_at_period_end boolean,
    canceled_at timestamp without time zone,
    livemode boolean,
    description text,
    PRIMARY KEY (subscription_id)
);

CREATE TABLE IF NOT EXISTS public.invoice_to_information
(
    invoice_to_information_id bigserial NOT NULL,
    company_id bigint,
    company_billing_address_id bigint,
    company_billing_information_id bigint,
    company_website_url_id bigint,
    PRIMARY KEY (invoice_to_information_id)
);

CREATE TABLE IF NOT EXISTS public.pay_to_information
(
    pay_to_information_id bigserial NOT NULL,
    company_id bigint,
    company_billing_address_id bigint,
    company_billing_information_id bigint,
    company_website_url_id bigint,
    PRIMARY KEY (pay_to_information_id)
);

CREATE TABLE IF NOT EXISTS public.subscription_invoice_list
(
    subscription_invoice_id bigserial NOT NULL,
    invoice_issue_date date,
    amount money,
    payment_status text,
    invoice_url text,
    PRIMARY KEY (subscription_invoice_id)
);

CREATE TABLE IF NOT EXISTS public.payment_method
(
    payment_method_id bigserial NOT NULL,
    payment_method_type text,
    "created_at?" timestamp with time zone,
    customer text,
    livemode boolean,
    metadata text,
    PRIMARY KEY (payment_method_id)
);

CREATE TABLE IF NOT EXISTS public.bank_account
(
    bank_account_id bigserial NOT NULL,
    account_holder_name text,
    account_holder_type text,
    account_type text,
    bank_name text,
    country text,
    currency character varying(20),
    customer text,
    fingerprint character varying(144),
    last4 integer,
    metadata text,
    routing_number bigint,
    status text,
    PRIMARY KEY (bank_account_id)
);

CREATE TABLE IF NOT EXISTS public.tax_identification_number
(
    tax_identification_number_id bigserial NOT NULL,
    tax_id bigint,
    PRIMARY KEY (tax_identification_number_id)
);

CREATE TABLE IF NOT EXISTS public.billing_information
(
    billing_information_id bigserial NOT NULL,
    legal_name text,
    tax_identification_number_id bigint,
    billing_email text,
    PRIMARY KEY (billing_information_id),
    CONSTRAINT "UNIQUE_billingEmail" UNIQUE (billing_email)
);

CREATE TABLE IF NOT EXISTS public.warranty_claim
(
    warranty_claim_id bigserial NOT NULL,
    model_id bigint,
    vin_id bigint,
    issue_id bigint,
    images bytea,
    videos bytea,
    purchasing_platform_id bigint,
    order_id bigint,
    invoice_copy text,
    purchase_date date,
    is_original_buyer boolean,
    first_name text,
    last_name text,
    email text,
    address_1 text,
    address_2 text,
    country_code character varying(3),
    province text,
    postal_code text,
    is_shipping_address boolean,
    is_approved boolean,
    created_by text,
    created_at timestamp with time zone,
    PRIMARY KEY (warranty_claim_id)
);

CREATE TABLE IF NOT EXISTS public.warranty_template_eligibility_rule
(
    warranty_template_eligibility_id bigserial NOT NULL,
    rule_assignment text NOT NULL,
    PRIMARY KEY (warranty_template_eligibility_id)
);

CREATE TABLE IF NOT EXISTS public.purchasing_platform
(
    purchasing_platform_id bigserial NOT NULL,
    purchasing_platform_name text NOT NULL,
    PRIMARY KEY (purchasing_platform_id)
);

CREATE TABLE IF NOT EXISTS public.purchasing_platform_list
(
    purchasing_platform_list_id bigserial NOT NULL,
    purchasing_platform_id bigint NOT NULL,
    company_id bigint,
    PRIMARY KEY (purchasing_platform_list_id)
);

CREATE TABLE IF NOT EXISTS public.issue
(
    issue_id bigserial NOT NULL,
    issue_name text NOT NULL,
    PRIMARY KEY (issue_id)
);

CREATE TABLE IF NOT EXISTS public.product_vins
(
    vin_number_id bigserial NOT NULL,
    vin_number bigint,
    PRIMARY KEY (vin_number_id)
);

CREATE TABLE IF NOT EXISTS public.product_serials
(
    product_serial_number_id bigserial NOT NULL,
    serial_number bigint,
    PRIMARY KEY (product_serial_number_id)
);

CREATE TABLE IF NOT EXISTS public.product_imei
(
    product_imei_id bigserial NOT NULL,
    product_imei_number bigint NOT NULL,
    PRIMARY KEY (product_imei_id)
);

CREATE TABLE IF NOT EXISTS public.subsystem_warranty_coverage
(
    subsystem_warranty_coverage_id bigserial NOT NULL,
    subsystem_name_id bigint,
    PRIMARY KEY (subsystem_warranty_coverage_id)
);

CREATE TABLE IF NOT EXISTS public.subsystem_name
(
    subsystem_name_id bigserial NOT NULL,
    name text NOT NULL,
    PRIMARY KEY (subsystem_name_id)
);

CREATE TABLE IF NOT EXISTS public.warranty_rules
(
    model_warranty_coverage_id bigint,
    industry_id bigint,
    model_id bigint,
    warranty_rules text
);

CREATE TABLE IF NOT EXISTS public.subsystem_covered_by_warranty
(
)
;

CREATE TABLE IF NOT EXISTS public.model_covered_by_warranty
(
    model_covered_by_warranty_id bigserial NOT NULL,
    model_id bigint NOT NULL,
    supplier_id bigint,
    manufacturer_id bigint,
    segment_id bigint,
    industry_id bigint,
    PRIMARY KEY (model_covered_by_warranty_id)
);

CREATE TABLE IF NOT EXISTS public.subscription_invoice_detail
(
    subscription_invoice_id bigserial NOT NULL,
    invoice_to_information_id bigint,
    pay_to_information_id bigint,
    invoice_number text,
    order_number bigint,
    invoice_date date,
    invoice_due_date date,
    item text,
    description text,
    payment_frequency text,
    invoice_period_start_date date,
    invoice_period_end_date date,
    PRIMARY KEY (subscription_invoice_id)
);

CREATE TABLE IF NOT EXISTS public.all_subsystems
(
    all_subsystems_id bigserial NOT NULL,
    PRIMARY KEY (all_subsystems_id)
);

CREATE TABLE IF NOT EXISTS public.subsystem
(
    subsystem_id bigserial NOT NULL,
    subsystem_name_id bigint,
    part_id bigint,
    model_id bigint,
    PRIMARY KEY (subsystem_id)
);

CREATE TABLE IF NOT EXISTS public.rma_status
(
    rma_satus_id bigserial NOT NULL,
    rma_status_name text NOT NULL,
    PRIMARY KEY (rma_satus_id)
);

CREATE TABLE IF NOT EXISTS public.all_warranty_exclusion
(
    all_warranty_exclusion_id bigserial NOT NULL,
    warranty_exclusion_id bigint NOT NULL,
    model_id bigint NOT NULL,
    manufacturer_id bigint,
    PRIMARY KEY (all_warranty_exclusion_id)
);

CREATE TABLE IF NOT EXISTS public.all_warranty_cover
(
    all_warranty_cover_id bigserial NOT NULL,
    warranty_cover_id bigint,
    model_id bigint,
    manufacturer_id bigint,
    PRIMARY KEY (all_warranty_cover_id)
);

CREATE TABLE IF NOT EXISTS public.warranty_exclusion
(
    warranty_exclusion_id bigserial NOT NULL,
    warranty_exclusion_name text NOT NULL,
    PRIMARY KEY (warranty_exclusion_id)
);

CREATE TABLE IF NOT EXISTS public.rma_item
(
    rma_item_id bigserial NOT NULL,
    rma_status_id bigint,
    claim_id bigint,
    ticket_id bigint,
    work_order_id bigint,
    return_method_id bigint,
    requester bigint,
    assigned_company_id bigint,
    assigned_location_id bigint,
    assigned_engineer text,
    canned_service_id bigint,
    turnaround_time_id bigint,
    due_date date,
    inbound_type text,
    message_id bigint,
    created_at timestamp without time zone,
    PRIMARY KEY (rma_item_id)
);

CREATE TABLE IF NOT EXISTS public.warranty_cover
(
    warranty_cover_id bigserial NOT NULL,
    issue_id bigint NOT NULL,
    waranty_rules bigint,
    PRIMARY KEY (warranty_cover_id)
);

CREATE TABLE IF NOT EXISTS public.stripe_billing_details
(
    stripe_billing_details_id bigserial NOT NULL,
    payment_method_id bigint,
    city text,
    country text,
    line1 text,
    line2 text,
    postal_code text,
    state text,
    email text,
    name text,
    phone text,
    PRIMARY KEY (stripe_billing_details_id)
);

ALTER TABLE IF EXISTS public.sub_industry
    ADD CONSTRAINT "FK_industry_id" FOREIGN KEY (industry_id)
    REFERENCES public.industry (industry_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product_subsegment
    ADD CONSTRAINT "FK_product_segment_id" FOREIGN KEY (product_segment_id)
    REFERENCES public.product_segment (product_segment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.city
    ADD CONSTRAINT "FK_country_code" FOREIGN KEY (country_code)
    REFERENCES public.country (country_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.billing_address
    ADD CONSTRAINT "FK_province_id" FOREIGN KEY (province_id)
    REFERENCES public.province (province_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.billing_address
    ADD CONSTRAINT "FK_city_id" FOREIGN KEY (city_id)
    REFERENCES public.city (city_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.billing_address
    ADD CONSTRAINT "FK_country_code_address" FOREIGN KEY (country_code)
    REFERENCES public.country (country_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.holiday_name
    ADD CONSTRAINT "FK_holiday_type_id" FOREIGN KEY (holiday_type_id)
    REFERENCES public.holiday_type (holiday_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.holiday_date
    ADD CONSTRAINT "FK_holiday_name_id" FOREIGN KEY (holiday_name_id)
    REFERENCES public.holiday_name (holiday_name_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.holiday_schedule_list
    ADD CONSTRAINT "FK_holiday_name_SL" FOREIGN KEY (holiday_name_id)
    REFERENCES public.holiday_name (holiday_name_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.holiday_schedule_list
    ADD CONSTRAINT "FK_holiday_date_id_SL" FOREIGN KEY (holiday_date_id)
    REFERENCES public.holiday_date (holiday_date_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.holiday_schedule_list
    ADD CONSTRAINT "FK_holiday_type_id_SL" FOREIGN KEY (holiday_type_id)
    REFERENCES public.holiday_type (holiday_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.company
    ADD CONSTRAINT "FK_company_brand_id" FOREIGN KEY (brand_id)
    REFERENCES public.brand (brand_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.company
    ADD CONSTRAINT "FK_company_billing_address" FOREIGN KEY (primary_billing_address_id)
    REFERENCES public.billing_address (billing_address_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.company
    ADD CONSTRAINT "FK_company_subindustry_id" FOREIGN KEY (sub_industry_id)
    REFERENCES public.sub_industry (sub_industry_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.company
    ADD CONSTRAINT "FK_company_product_segment_id" FOREIGN KEY (product_segment_id)
    REFERENCES public.product_segment (product_segment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.invoice_to_information
    ADD CONSTRAINT "FK_invoice_company_id" FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pay_to_information
    ADD CONSTRAINT "FK_pay_company_id" FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.billing_information
    ADD CONSTRAINT "FK_billing_tax_identification_number_id" FOREIGN KEY (tax_identification_number_id)
    REFERENCES public.tax_identification_number (tax_identification_number_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.warranty_claim
    ADD CONSTRAINT "FK_warranty_country_code" FOREIGN KEY (country_code)
    REFERENCES public.country (country_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.warranty_claim
    ADD CONSTRAINT "FK_warranty_issue_id" FOREIGN KEY (issue_id)
    REFERENCES public.issue (issue_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.warranty_claim
    ADD CONSTRAINT "FK_warranty_claim_purchasing_platform_id" FOREIGN KEY (purchasing_platform_id)
    REFERENCES public.purchasing_platform (purchasing_platform_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.purchasing_platform_list
    ADD CONSTRAINT "FK_purchasing_platform_id" FOREIGN KEY (purchasing_platform_id)
    REFERENCES public.purchasing_platform (purchasing_platform_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.purchasing_platform_list
    ADD CONSTRAINT "FK_purchasing_platform_company_id" FOREIGN KEY (company_id)
    REFERENCES public.company (company_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.warranty_rules
    ADD CONSTRAINT "FK_warranty_rules_industry_id" FOREIGN KEY (industry_id)
    REFERENCES public.industry (industry_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.model_covered_by_warranty
    ADD CONSTRAINT "FK_model-warranty-coverage_industry_id" FOREIGN KEY (industry_id)
    REFERENCES public.industry (industry_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.subsystem
    ADD CONSTRAINT subsystem_name_id FOREIGN KEY (subsystem_name_id)
    REFERENCES public.subsystem_name (subsystem_name_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.all_warranty_exclusion
    ADD CONSTRAINT "FK_warranty_exclusion_id" FOREIGN KEY (warranty_exclusion_id)
    REFERENCES public.warranty_exclusion (warranty_exclusion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.all_warranty_cover
    ADD CONSTRAINT "FK_warranty_cover_id" FOREIGN KEY (warranty_cover_id)
    REFERENCES public.warranty_cover (warranty_cover_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.rma_item
    ADD CONSTRAINT "FK_rma_item_status_id" FOREIGN KEY (rma_status_id)
    REFERENCES public.rma_status (rma_satus_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.warranty_cover
    ADD CONSTRAINT "FK_warranty_issue_id" FOREIGN KEY (issue_id)
    REFERENCES public.issue (issue_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.stripe_billing_details
    ADD CONSTRAINT "FK_stripe_billingaddress_payment_method_id" FOREIGN KEY (payment_method_id)
    REFERENCES public.payment_method (payment_method_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
